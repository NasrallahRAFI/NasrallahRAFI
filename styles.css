function connectToBroker() {
  const username = usernameInput.value.trim();
  const password = passwordInput.value;
  const brokerUrl = brokerInput.value.trim();
  const topics = topicInput.value.trim().split(',').map(t => t.trim()).filter(t => t); // Split and clean topics

  // Clear previous error
  errorDiv.classList.add('hidden');
  errorDiv.textContent = '';

  if (!username || !password || !brokerUrl) {
    showError('Please enter all required fields');
    return;
  }

  if (!topics.length) {
    showError('Please enter at least one topic');
    return;
  }

  try {
    if (typeof mqtt === 'undefined') {
      showError('MQTT library not loaded');
      return;
    }

    client = mqtt.connect(brokerUrl, {
      username,
      password,
      clientId: 'iotclient_' + Math.random().toString(16).slice(3),
      reconnectPeriod: 1000,
      keepalive: 60,
    });

    client.on('connect', () => {
      updateStatus('Connected to IoT Server', true);
      connectBtn.classList.add('hidden');
      disconnectBtn.classList.remove('hidden');
      
      // Subscribe to all specified topics
      topics.forEach(topic => {
        client.subscribe(topic, (err) => {
          if (!err) {
            messages.innerHTML += `<li>Subscribed to ${sanitizeHTML(topic)}</li>`;
          } else {
            showError(`Error subscribing to ${sanitizeHTML(topic)}: ${err.message}`);
          }
        });
      });
    });

    client.on('reconnect', () => {
      updateStatus('Reconnecting...', false);
    });

    client.on('message', (receivedTopic, message) => {
      const msg = sanitizeHTML(message.toString());
      // Include topic in message display
      messages.innerHTML += `<li><strong>${sanitizeHTML(receivedTopic)}</strong>: ${msg}</li>`;
      const storedMessages = JSON.parse(localStorage.getItem('iotMessages') || '[]');
      storedMessages.push({ topic: receivedTopic, message: msg });
      localStorage.setItem('iotMessages', JSON.stringify(storedMessages));
      messages.scrollTop = messages.scrollHeight;
    });

    client.on('error', (err) => {
      let errorMessage = err.message;
      if (errorMessage.includes('Bad username or password') || errorMessage.includes('Connection refused')) {
        errorMessage = 'Invalid username or password';
      }
      showError(`Connection failed: ${errorMessage}`);
      updateStatus('Disconnected', false);
      client.end();
    });

    client.on('close', () => {
      updateStatus('Disconnected', false);
      connectBtn.classList.remove('hidden');
      disconnectBtn.classList.add('hidden');
      errorDiv.classList.add('hidden');
    });
  } catch (err) {
    showError(`Connection failed: ${err.message}`);
    updateStatus('Disconnected', false);
  }
}

// Update stored messages loading to include topic
window.addEventListener('load', () => {
  const storedMessages = JSON.parse(localStorage.getItem('iotMessages') || '[]');
  storedMessages.forEach(({ topic, message }) => {
    messages.innerHTML += `<li><strong>${sanitizeHTML(topic)}</strong>: ${sanitizeHTML(message)}</li>`;
  });
});
